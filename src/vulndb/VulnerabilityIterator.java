/**
 * Iterator object to retrieve all vulnerabilities from a database.
 */
package vulndb;

import java.util.Iterator;

import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;

public class VulnerabilityIterator implements Iterator<VulnerabilityTuple> {
	// Idea: Probably it's a good idea to make this a singleton
	
	// Filename to database
	private String vul_db;
	// end of file reached?
	private boolean eof = false;
	// the parser instance
	SAXParser parser;
	
	public VulnerabilityIterator(String vul_db_filepath) {
		vul_db = vul_db_filepath;
		eof = false;
		
		SAXParserFactory factory = SAXParserFactory.newInstance();
		try {
			parser = factory.newSAXParser();
		} catch (ParserConfigurationException e) {
			e.printStackTrace();
		} catch (SAXException e) {
			e.printStackTrace();
		}
	}
	
	@Override
	public boolean hasNext() {
		return !eof;
	}

	@Override
	public VulnerabilityTuple next() {
		
		// TODO: if file is not yet opened, do so and store file pointer in a new member
		// TODO: read vuln_db file and return VulnerabilityTuple for each match
		//       this includes, retrieving CVE (vulnerability ID), software name,
		//       version number and dependencies
		// TODO: set eof attribute correspondingly (if no further vulnerabilities can be read)
		eof = true;
		return null;
	}

	@Override
	public void remove() {
		// TODO: remove current vulnerability from the list
		//       (should not be used, but required by interface)
	}
}