package vulndb;

import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import db.ServerSoftwareTuple;

public class VulnerabilityTuple implements Comparable<VulnerabilityTuple> {
	private String cve;
	private String name;
	private String version_number;
	private String stack;
	
	public VulnerabilityTuple() {
		
	}

	public String getCVE() {
		return cve;
	}

	public String getSoftware() {
		return name;
	}
	
	public String getVersion() {
		return version_number;
	}

	public String getDependency() {
		return stack;
	}
	
    @Override
    public int compareTo(VulnerabilityTuple other) {
    	int result = cve.compareTo(other.getCVE());
    	if (result != 0)
    		return result;
    	result = name.compareTo(other.getSoftware());
    	if (result != 0)
    		return result;
    	result = version_number.compareTo(other.getVersion());
    	if (result != 0)
    		return result;
    	result = stack.compareTo(other.getDependency());
    	if (result != 0)
    		return result;
        return 0;
    }
    
    public static int dependencyCompare(String d1, String d2) {
    	return 0;
    }
    
    public static ArrayList<Integer> getVersionNumbers(String vn) {
    	if (vn.length() == 0)
    		return new ArrayList<Integer>();

    	Pattern re = Pattern.compile("(\\d+(\\.\\d+)+)");
    	Matcher m = re.matcher(vn);
    	String integerlist = m.group(1);

    	String[] integers = integerlist.split("\\.");
    	ArrayList<Integer> numbers = new ArrayList<Integer>();
    	for (String str : integers) {
    		numbers.add(Integer.parseInt(str));
    	}

    	return numbers;
    }

    public static int versionCompare(String v1, String v2) {
    	ArrayList<Integer> version1 = getVersionNumbers(v1);
    	ArrayList<Integer> version2 = getVersionNumbers(v2);
    	
    	if (version1.size() == 0 && version2.size() == 0)
    		return 0;
    	if (version1.size() == 0)
    		return -1;
    	if (version2.size() == 0)
    		return 1;

    	// compare value by value
    	for (int i = 0; i < version1.size(); i++) {
    		if (version2.size() >= i)
    			break;
    		int cmp = Integer.compare(version1.get(i), version2.get(i));
    		if (cmp != 0)
    			return cmp;
    	}
    	
    	return 0;
    }
    
    public int compareTo(ServerSoftwareTuple ss) {
    	// TODO: major implementation for matching vulnerability with server software

    	int name_cmp = name.compareTo(ss.getSoftware());
    	int version_cmp = versionCompare(version_number, ss.getVersion());
    	//int dep_cmp = dependencyCompare(stack, ss.getDependency());

    	if (name_cmp == 0 && version_cmp == 0)
    		return 0;

    	if (name_cmp != 0)
    		return name_cmp;
    	if (version_cmp != 0)
    		return version_cmp;

    	return 0;
    }
    
    public String toString() {
    	return MessageFormat.format("VulnerabilityTuple<ID #{0}, {1} v{2}, {3}>",
    			cve, name, version_number, stack);
    }
}
